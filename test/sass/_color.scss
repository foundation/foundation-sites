@import 'true';

@import '../../scss/util/value';
@import '../../scss/util/color';
@import '../../scss/global';

@include test-module('Color') {

  @include test('Foreground (Black) [function]') {
    $test: color-pick-contrast($white);
    $expect: $black;

    @include assert-equal($test, $expect,
      'Returns black if the input color is light');
  }

  @include test('Foreground (White) [function]') {
    $test: color-pick-contrast($black);
    $expect: $white;

    @include assert-equal($test, $expect,
      'Returns white if the input color is dark');
  }

  @include test('Smart Scale (Darken) [function]') {
    $color: $white;
    $scale: 5%;
    $threshold: 60%;

    $test: smart-scale($color, $scale, $threshold);
    $expect: scale-color($color, $lightness: -$scale);

    @include assert-equal($test, $expect,
      'Darkens a light color');
  }

  @include test('Smart Scale (Lighten) [function]') {
    $color: $black;
    $scale: 5%;
    $threshold: 60%;

    $test: smart-scale($color, $scale, $threshold);
    $expect: scale-color($color, $lightness: $scale);

    @include assert-equal($test, $expect,
      'Lightens a dark color');
  }

  @include test('Get Color (Blue) [function]') {
    $expect: #1779ba;
    $foundation-colors: ('blue': $expect);
    $test: get-color('blue');

    @include assert-equal($test, $expect,
      'Returns the color for blue from the color map');
  }

  @include test('Get State (Primary) [function]') {
    $expect: #1779ba;
    $foundation-states: (primary: $expect);
    $test: get-state-color(primary);

    @include assert-equal($test, $expect,
      'Returns the color for the primary state from the states map');
  }
}
