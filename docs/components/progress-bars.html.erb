
<% @side_nav = "css" %>
<div class="row">
  <div class="large-9 push-3 columns">

    <% @page_title = "Progress Bars" %>
    <div class="row">
      <div class="large-12 columns">
        <h2><%= @page_title %></h2>
        <h4 class="subheader"><p>A simple way to add progress bars to your layouts. You only need two HTML elements to make them and they're easy to customize.</h4>

        <div class="progress large-6"><span class="meter" style="width: 40%"></span></div>
        <div class="radius progress success large-8"><span class="meter" style="width: 80%"></span></div>
        <div class="nice round progress alert large-10"><span class="meter" style="width: 30%"></span></div>
        <div class="nice secondary progress"><span class="meter" style="width: 50%"></span></div>

        <hr>
      </div>
    </div>

    <div class="row">
      <div class="large-12 columns">

        <h3>Build With Predefined HTML Classes</h3>
        <p>There are two ways to add progress bars labels in Foundation 4: with our predefined HTML classes or with our mixins. Building progress bars using our predefined classes is simple, you'll just need to write a <code>&lt;div class="progress"&gt;</code> and inside of that a <code>&lt;span class="meter"&gt;</code>. The meter is the element that you can set a width to, either inline or programmatically on your own accord. The simplest way to do this is to change the <code>style="width:%"</code> property on the meter, itself.</p>

<%= code_example '
<div class="progress"><span class="meter"></span></div>', :html %>

        <div class="progress"><span class="meter"></span></div>

        <p>The class options:</p>
        <ul class="disc">
          <li>The color classes include: <code>.secondary, .alert</code> or <code>.success</code></li>
          <li>The radius classes include: <code>.radius</code> or <code>.round</code>.</li>
          <li>You may also you the grid width classes: <code>.small-#</code> or <code>.large-#</code></li>
        </ul>

<%= code_example '
<div class="progress large-6 success round"><span class="meter" style="width: 40%"></span></div>', :html %>

        <div class="progress large-6 success round"><span class="meter" style="width: 40%"></span></div>

        <p>For these styles to come across, make sure you have the default Foundation CSS package or that you've selected labels from a custom package. These should be linked up following our default <a href="../index.html">HTML page structure</a>.</p>

        <hr>

        <h3>Build with our Mixins</h3>
        <p>We've included SCSS mixins used to style progress bars. To use the mixin, you'll need to have the <a href="../sass.html">extension installed</a> or grab <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/_variables.scss">_variables.scss</a>, <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/components/_global.scss">_global.scss</a> and <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/components/_progress-bars.scss">_progress-bars.scss</a> from Github and throw them into a Foundation folder in your project directory. From there, you can import the files at the top of your own SCSS stylesheet, like so:</p>

<%= code_example '
@import "foundation/variables";
@import "foundation/components/global";
@import "foundation/components/progress-bars";
', :css %>

        <h5>Container Mixin</h5>
        <p>Progress bars are made from a container and a meter. The container element holds most of the styles that come across and holds the meter, itself. You can create progress bars by creating a <code>&lt;div&gt;</code> and giving it a unique class or ID, then applying the mixin styles to it.</p>

<%= code_example '
.your-class-name { @include progress-container; }', :css %>

        <div class="progress"></div>

        <h5>Meter Mixin</h5>
        <p>The next step is to include an element inside of your container that will be styled as the meter.

<%= code_example '
.your-class-name { @include progress-container;
  & > span { @include progress-meter($bg); }
}

/* We can set the background color of the meter to a variable or any color value */
$bg: $primary-color
', :css %>

        <div class="progress"><span class="meter"></span></div>

        <h5>Adding Border Radius</h5>
        <p>Like we mentioned on a few of the other component pages, you have access to some global mixins that can add even more style to elements like this. Here's an example of using border radius:</p>

<%= code_example '
.your-class-name {
  @include progress-container;
  @include radius(6px);
  & > span {
    @include progress-meter(pink);
    @include radius(5px);
  }
}', :css %>

        <div class="progress-custom"><span style="width:33%"></span></div>

        <h5>Default SCSS Variables</h5>

<%= code_example '
$include-html-media-classes: $include-html-classes;

/* We use this to se the prog bar height */
$progress-bar-height: em-calc(25);
$progress-bar-color: transparent;

/* We use these to control the border styles */
$progress-bar-border-color: darken(#fff, 20%);
$progress-bar-border-size: 1px;
$progress-bar-border-style: solid;
$progress-bar-border-radius: $global-radius;

/* We use these to control the margin & padding */
$progress-bar-pad: em-calc(2);
$progress-bar-margin-bottom: em-calc(10);

/* We use these to set the meter colors */
$progress-meter-color: $primary-color;
$progress-meter-secondary-color: $secondary-color;
$progress-meter-success-color: $success-color;
$progress-meter-alert-color: $alert-color;', :css %>

        <p><strong>Note:</strong> <code>em-calc();</code> is a function we wrote to convert <code>px</code> to <code>em</code>. It is included in <strong>_variables.scss</strong>.</p>

      </div>
    </div>
  </div>
  <div class="large-3 pull-9 columns">
    <%= render "_sidebar-components.html.erb" %>
  </div>
</div>
