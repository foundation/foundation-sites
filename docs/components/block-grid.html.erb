<% @side_nav = "grid" %>

<div class="row">
  <div class="large-9 push-3 columns">

    <% @page_title = "Block Grid" %>
    <div class="row">
      <div class="large-12 columns">
        <h2><%= @page_title %></h2>
        <h4 class="subheader">Block grids give you a way to evenly split contents of a list within the grid. If you wanted to create a row of 5 images or paragraphs that need to stay evenly spaced no matter the screen size, the block grid is for you.</h4>

        <ul class="small-block-grid-2 large-block-grid-4">
          <li><img class="th" src="../img/demos/demo1.jpg"></li>
          <li><img class="th" src="../img/demos/demo2.jpg"></li>
          <li><img class="th" src="../img/demos/demo3.jpg"></li>
          <li><img class="th" src="../img/demos/demo4.jpg"></li>
        </ul>

        <hr>

        <h3>Building With Predefined HTML Classes</h3>
        <p>Block grids are made from a <code>ul.small-block-grid-#</code> or <code>ul.large-block-grid-#</code>. These are ideal for blocked-in content generated by an application, as they do not require rows or even numbers of elements to display correctly.</p>

        <p>These have a bit of flexibility since you have access to two separate grids between our built in 768px breakpoint. If you use the <code>small-block-grid</code> only, the grid will keep its spacing and configuration no matter the screen size. If you use <code>large-block-grid</code> only, the list items will stack on top of each other for small devices. If you use both of those classes combined, you can control the configuration and layout separately for each breakpoint.</p>

<%= code_example '
<!-- Using only the small-block-grid -->
<ul class="small-block-grid-2">
  <li><img src="../img/demos/demo1.png"></li>
  <li><img src="../img/demos/demo2.png"></li>
  <li><img src="../img/demos/demo3.png"></li>
  <li><img src="../img/demos/demo4.png"></li>
</ul>

<!-- Using only the large-block-grid -->
<ul class="large-block-grid-4">
  <li><img src="../img/demos/demo1.png"></li>
  <li><img src="../img/demos/demo2.png"></li>
  <li><img src="../img/demos/demo3.png"></li>
  <li><img src="../img/demos/demo4.png"></li>
</ul>

<!-- Using both block grids together for different layouts -->
<ul class="small-block-grid-2 large-block-grid-4">
  <li><img src="../img/demos/demo1.png"></li>
  <li><img src="../img/demos/demo2.png"></li>
  <li><img src="../img/demos/demo3.png"></li>
  <li><img src="../img/demos/demo4.png"></li>
</ul>
', :html %>

        <p>For these styles to take effect, make sure you have the <strong>default Foundation CSS package</strong> or that you've <strong>selected block grid from a custom package</strong>. These should be linked up following our default <a href="../index.html">HTML page structure</a>.</p>

        <hr>

        <h3>Using The Mixin</h3>
        <p>We've included SCSS mixins used to style block-grids. To use the mixin, you'll need to have the <a href="../sass.html">extension installed</a> or grab <a href="https://github.com/zurb/foundation/tree/master/scss/foundation/components">_variables.scss</a>, <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/components/_global.scss">_global.scss</a> and <a href="https://github.com/zurb/foundation/tree/master/scss/foundation/components">_block-grid.scss</a> from Github and throw them into a foundation folder in your project directory. From there, you can import the files at the top of your own SCSS stylesheet, like so:</p>

<%= code_example '
@import "foundation/variables";
@import "foundation/components/global";
@import "foundation/components/block-grid";
', :sass %>

        <p>If you are using the mixins, you may include the styles on whatever class or ID you'd like, just make sure you follow our markup structure. Since we don't have any media queries baked into the mixin itself, you can apply the styles at whatever breakpoint you want! Just change the configuration within each.</p>

<%= code_example '
<ul class="your-class-name">
  <li><img src="../img/demos/demo1.png"></li>
  <li><img src="../img/demos/demo2.png"></li>
  <li><img src="../img/demos/demo3.png"></li>
  <li><img src="../img/demos/demo4.png"></li>
</ul>', :html %>

        <h5>Quick Mixin</h5>
        <p>You can build your block-grid using our global mixin by including it on your custom class or ID in your own stylesheet. The mixin contains options configuring the block grid layout and margin on the fly. The global mixin looks like this:</p>

<%= code_example '
/* Mixin and configurable options */
.your-class-name { @include block-grid($per-row, $spacing, $base-styles); }

/* This controls how many elements will be on each row of the block grid. */
/* Set this to whatever number you need, up to the max allowed in the variable */
$per-row: false

/* This controls how much space is between each item in the block grid */
$spacing: $block-grid-default-spacing

/* This controls whether or not base styles come through, set to false to leave out */
/* This is handy for when you create multiple block-grids and want less CSS output repetition */
$base-style: true
', :scss %>

        <ul class="small-block-grid-5">
          <li><img src="../img/demos/demo1.jpg"></li>
          <li><img src="../img/demos/demo2.jpg"></li>
          <li><img src="../img/demos/demo3.jpg"></li>
          <li><img src="../img/demos/demo4.jpg"></li>
          <li><img src="../img/demos/demo5.jpg"></li>
        </ul>

        <h5>Clearing Block Grid Rows</h5>
        <p>We have this built into the CSS, but you'll need to add a bit of code if you want your block grid to change layout between breakpoints. If you don't use this, it will inherit whatever you put in the smallest media query. This code looks for the <code>n+1</code> of the grid so that it clears properly. That code looks like this:</p>

<%= code_example '
.your-small-class-name > li { clear: none !important; }
', :scss %>

        <p><strong>Note:</strong> If you are using the same class across breakpoints, your mixin should override this and you won't need it. If you want to control the layout using different classes, use the above snippet.</p>

        <h5>Available SCSS Variables</h5>

<%= code_example '
/* We use this to control the maximum blocks and spacing */
$block-grid-elements: 12;
$block-grid-default-spacing: em-calc(20);

/* Enables media queries for block-grid classes. Set to false if writing semantic HTML. */
$block-grid-media-queries: true
', :scss %>

      </div>
    </div>

  </div>

  <div class="large-3 pull-9 columns">
    <%= render "_sidebar-components.html.erb" %>
  </div>
</div>




