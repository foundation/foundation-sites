<% @side_nav = "css" %>

<div class="row">
  <div class="large-9 push-3 columns">

    <% @page_title = "Panels" %>
    <div class="row">
      <div class="large-12 columns">
        <h2><%= @page_title %></h2>
        <h4 class="subheader">A panel is a simple, helpful Foundation component that enables you to outline sections of your page easily. This allows you to view your page sections as you add content to them or add emphasis to a section. The width is controlled by the grid columns you put them inside.</h4>
      </div>
    </div>

    <div class="row">
      <div class="large-12 columns">

        <div class="row">
          <div class="large-6 columns">
            <div class="panel">
              <h5>This is a regular panel.</h5>
              <p>It has an easy to override visual style, and is appropriately subdued.</p>
            </div>
          </div>
          <div class="large-6 columns">
            <div class="panel callout radius">
              <h5>This is a callout panel.</h5>
              <p>It's a little ostentatious, but useful for important content.</p>
            </div>
          </div>
        </div>

        <hr>

        <h3>Build With Predefined HTML Classes</h3>
        <p>There are two ways to build panels in Foundation 4, either with our predefined HTML or with our mixin. Building panels using our predefined class isn't hard at all. You'll start with <code>&lt;div&gt;</code> and add a class of <code>.panel</code> to it. From there, you just need to add content inside, anything will do.</p>

        <p>Available HTML class options:</p>
        <ul class="disc">
          <li>Adding <code>.callout</code> to your panel will make it our default blue and add a shiny top edge to help it stand out.</li>
          <li>You may also you <code>.radius</code> to add a tasteful border-radius to the mix.</li>
        </ul>

<%= code_example '
<div class="panel">
  <!-- Content here -->
</div>', :html %>

        <div class="panel">Basic panel with content.</div>

        <p>For these styles to come across, make sure you have the default Foundation CSS package or that you've selected panels from a custom package. These should be linked up following our default <a href="../index.html">HTML page structure</a>.</p>

        <hr>

        <h3>Build with a Mixin</h3>
        <p>We've included SCSS mixins used to style panels so that you can code smarter. To use the mixin, you'll need to have the <a href="../sass.html">extension installed</a> or grab <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/_variables.scss">_variables.scss</a>, <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/components/_global.scss">_global.scss</a> and <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/components/_panels.scss">_panels.scss</a> from Github and throw them into a Foundation folder in your project directory. From there, you can import the files at the top of your own SCSS stylesheet, like so:</p>

<%= code_example '
@import "foundation/variables";
@import "foundation/components/global";
@import "foundation/components/panels";
', :css %>

        <p>If you are using the mixins, you may include the styles on whatever class or ID you'd like to the <code>&lt;div&gt;</code>.</p>

<%= code_example '
<div class="your-class-name">
  <!-- Content here -->
</div>', :html %>

        <h5>Quick Mixin</h5>
        <p>You can build your panel using our global mixin by including it on your own custom class or ID. The mixin contains all the necessary styles and they can be customized a bit within the mixin. The rest of the important styles are controlled by variables. The code looks like this:</p>

<%= code_example '
.your-class-name { @include panel; }', :css %>

        <div class="panel">
          Panel content goes here...
        </div>

        <p>You also have <strong>three options</strong> available to customize the panel within the mixin. These control the background color (which also effect border and font color) and the interior padding of the panel itself.</p>

<%= code_example '
.your-class-name { @include panel($bg, $padding, $adjust); }

/* This controls the background color, border color and type color based on brightness of the bg. */
$bg: $secondary-color

/* This controls the interior padding */
$padding: $panel-padding

/* Control whether panel mixin adjusts header styles */
$adjust: true
', :css %>

        <div class="panel-custom">
          Custom panel. Hell yeah! We used @include panel(pink, 40px);
        </div>

        <h5>Default SCSS Variables</h5>

<%= code_example '
$include-html-panel-classes: $include-html-classes;

/* We use these to control the background and border styles */
$panel-bg: darken(#fff, 5%);
$panel-border-style: solid;
$panel-border-size: 1px;

/* We use this % to control how much we darken things on hover */
$panel-function-factor: 10%;
$panel-border-color: darken($panel-bg, $panel-function-factor);

/* We use these to set default inner padding and bottom margin */
$panel-margin-bottom: em-calc(20);
$panel-padding: em-calc(20);

/* We use these to set default font colors */
$panel-font-color: #333;
$panel-font-color-alt: #fff;

$panel-header-adjust: true;', :css %>

        <p><strong>Note:</strong> <code>em-calc();</code> is a function we wrote to convert <code>px</code> to <code>em</code>. It is included in <strong>_variables.scss</strong>.</p>


      </div>
    </div>
  </div>
  <div class="large-3 pull-9 columns">
    <%= render "_sidebar-components.html.erb" %>
  </div>
</div>
