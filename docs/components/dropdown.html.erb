<% @side_nav = "js" %>

<div class="row">
  <div class="large-9 push-3 columns">

    <% @page_title = "Dropdown" %>
    <div class="row">
      <div class="large-12 columns">
        <h2><%= @page_title %></h2>
        <h4 class="subheader">In Foundation 4, we wanted to rid our codebase of many different dropdowns within various UI elements. So we created a universal dropdown plugin that will attach dropdowns or popovers next to anything!</h4>

        <a href="#" class="button" data-dropdown="tinyDrop">Link Dropdown &raquo;</a>
        <a href="#" class="button" data-dropdown="contentDrop">Content Dropdown &raquo;</a>

        <hr>
      </div>
    </div>

    <div class="row">
      <div class="large-12 columns">

        <h5>Build With Predefined HTML Classes</h5>
        <p>To create the dropdown you'll need to attach a <code>data-dropdown="your-id"</code> to whatever element you want the dropdown attached to. From there you'll create a list that holds the links or content and add an <code>id="your-id"</code> that associates with the element it belongs to. To style the dropdown, we've included a class of <code>.f-dropdown</code> that you can target and style to your hearts desire. If you want the dropdown to be content, simply chain the class <code>.content</code> to the dropdown. Here's an example of that markup:</p>

<%= code_example '
<a href="#" data-dropdown="drop1">Has Dropdown</a>
<a href="#" data-dropdown="drop2">Has Content Dropdown</a>

<ul id="drop1" class="f-dropdown" data-dropdown-content>
  <li><a href="#">This is a link</a></li>
  <li><a href="#">This is another</a></li>
  <li><a href="#">Yet another</a></li>
</ul>

<ul id="drop2" class="f-dropdown content" data-dropdown-content>
  <li><a href="#">This is a link</a></li>
  <li><a href="#">This is another</a></li>
  <li><a href="#">Yet another</a></li>
</ul>
', :html %>

        <p><a href="#" data-dropdown="drop1">Has Dropdown</a> | <a href="#" data-dropdown="drop2">Has Content Dropdown</a></p>

        <p>You'll notice that <code>data-dropdown="drop1"</code> and <code>id="drop1"</code> have the same value. This is what tells the dropdown plugin where to look to find the position to attach the dropdown.</p>

        <p>Available class options:</p>
        <ul class="disc">
          <li><code>tiny</code>: Make the dropdown have a max-width of 200px</li>
          <li><code>small</code>: Make the dropdown have a max-width of 300px</li>
          <li><code>medium</code>: Make the dropdown have a max-width of 500px</li>
          <li><code>large</code>: Make the dropdown have a max-width of 800px</li>
          <li><code>content</code>: Add padding inside the dropdown for better looking content.</li>
        </ul>

        <p>You may chain one class from each group to build up desired default styles. For these styles to take effect, make sure you have the <strong>default Foundation CSS package</strong> or that you've selected <strong>dropdowns from a custom package</strong>. These should be linked up following our default <a href="../index.html#basicHTMLMarkup">HTML page structure</a>.</p>

        <hr>

        <h3>Build With Our Mixins</h3>
        <p>We've included SCSS mixins used to style dropdowns. To use the mixin, you'll need to have the <a href="../sass.html">extension installed</a> or grab <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/_foundation-global.scss">_foundation-global.scss</a>, <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/components/_global.scss">_global.scss</a> and <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/components/_dropdown.scss">_dropdown.scss</a> from Github and throw them into a foundation folder in your project directory. From there, you can import the files at the top of your own SCSS stylesheet, like so:</p>

<%= code_example '
@import "foundation/foundation-global", "foundation/components/global", "foundation/components/dropdown";
', :css %>

        <p>If you are using the mixins, you may include the styles on whatever class or ID you'd like, just make sure you follow our markup structure:</p>

<%= code_example '
<a href="#" data-dropdown="drop1">Has Dropdown</a>

<ul id="drop1" class="your-class-name" data-dropdown-content>
  <li><a href="#">This is a link</a></li>
  <li><a href="#">This is another</a></li>
  <li><a href="#">Yet another</a></li>
</ul>
', :html %>

        <h5>The Container Mixin</h5>
        <p>There are two mixin you can use when building your dropdowns, the container and the list style. The container mixin will give you all the styles needed for the base styles of the dropdown, not including styles for the default link list style. The container mixin looks like this:</p>

<%= code_example '
/* Container mixin and its options */
.your-class-name { @include dropdown-container($content, $triangle, $max-width); }

/* This can be set to "list" or "content" depending on what you want inside. */
$content: list

/* If you do not want to attach the triangle pop, set this to false. */
$triangle: true

/* By default, the dropdown is 200px max-width, taking on 100% when gets smaller than that. */
/* You can set this to any number you want or change it globally with the variable. */
$max-width: $f-dropdown-max-width
', :css %>

        <h5>The List Style Mixin</h5>
        <p>For content dropdowns, we don't add any extra style to the inside of the dropdown other than padding around the edges. For link lists, we wanted to predefined style that would look good out of the box and match the style of our custom select dropdowns. The style mixin looks like this:</p>

<%= code_example '
/* The style mixin - It has no options other than variables to make global changes */
.your-class-name {
  @include dropdown-container($content, $triangle, $max-width);

  li { @include dropdown-style; }
}
', :css %>

        <h5>Default SCSS Variables</h5>

<%= code_example '
/* We use these to controls height and width styles. */
$f-dropdown-max-width:            200px;
$f-dropdown-height:               auto;
$f-dropdown-max-height:           none;
$f-dropdown-margin-top:           2px;

/* We use this to control the background color */
$f-dropdown-bg:                   #fff;

/* We use this to set the border styles for dropdowns. */
$f-dropdown-border-style:         solid;
$f-dropdown-border-width:         1px;
$f-dropdown-border-color:         darken(#fff, 20%);

/* We use these to style the triangle pip. */
$f-dropdown-triangle-size:        6px;
$f-dropdown-triangle-color:       #fff;
$f-dropdown-triangle-side-offset: 10px;

/* We use these to control styles for the list elements. */
$f-dropdown-list-style:           none;
$f-dropdown-font-color:           #555;
$f-dropdown-font-size:            emCalc(14px);
$f-dropdown-list-padding:         emCalc(5px) emCalc(10px);
$f-dropdown-line-height:          emCalc(18px);
$f-dropdown-list-hover-bg:        #eeeeee;', :css %>

      <p><strong>Note:</strong> <code>emCalc();</code> is a function we wrote to convert <code>px</code> to <code>em</code>. It is included in <strong>_foundation-global.scss</strong>.</p>

      <hr>

      <h3>Using the JavaScript</h3>
      <p>You'll need to include <code>foundation.joyride.js</code> to get plugin to work. You'll also need to make sure to include <code>zepto.js</code> and <code>foundation.js</code> above the alert plugin. Above your closing <code>&lt;/body&gt;</code> tag include the following line of code and make sure you have the JS in your directory.</p>

      <p><a href="../javascript.html" title="How to install Foundation JavaScript">Read how to install Foundation JavaScript</a></p>

      <p>Required Foundation Library: <code>foundation.dropdown.js</code></p>

      <h5>Optional JavaScript Configuration</h5>

      <p>Dropdown options can only be passed in during initialization at this time.</p>

    <%= code_example "
{
  // specify the class used for active dropdowns
  activeClass: 'open'
}", :js %>

      </div>
    </div>

  </div>

  <div class="large-3 pull-9 columns">
    <%= render "_sidebar-components.html.erb" %>
  </div>
</div>

<ul id="tinyDrop" class="f-dropdown" data-dropdown-content>
  <li><a href="#">This is a link</a></li>
  <li><a href="#">This is another</a></li>
  <li><a href="#">Yet another</a></li>
</ul>
<div id="contentDrop" class="f-dropdown content medium" data-dropdown-content>
  <h4>Title</h4>
  <p>Some text that people will think is awesome! Some text that people will think is awesome! Some text that people will think is awesome!</p>
  <img src="../img/demos/demo1.jpg">
  <p>More test.</p>
  <a href="#" class="button">Button</a>
</div>
<ul id="drop1" data-dropdown-content class="f-dropdown">
  <li><a href="#">This is a link</a></li>
  <li><a href="#">This is another</a></li>
  <li><a href="#">Yet another</a></li>
</ul>
<div id="drop2" data-dropdown-content class="f-dropdown content">
  <p>Some text that people will think is awesome! Some text that people will think is awesome! Some text that people will think is awesome!</p>
</div>