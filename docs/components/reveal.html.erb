<% @side_nav = "js" %>

<div class="row">
  <div class="large-9 push-3 columns">

    <% @page_title = "Reveal" %>
    <div class="row">
      <div class="large-12 columns">
        <h2><%= @page_title %></h2>
        <h4 class="subheader">Modal dialogs, or pop-up windows, are handy for prototyping and production. Foundation includes Reveal our jQuery modal plugin, to make this easy for you.</h4>

        <a href="#" data-reveal-id="firstModal" class="radius button">Example Modal&hellip;</a>
        <a href="#" data-reveal-id="videoModal" class="radius button">Example Modal w/Video&hellip;</a>

        <hr>

      </div>
    </div>

    <div class="row">
      <div class="large-12 columns">

        <h3>Build With HTML Classes</h3>
        <p>Reveal modals are easy to build.  They should live right above your closing <code>body</code> tag, but if they are nested within the document, Reveal will temporarily relocate them while open to ensure proper positioning. Follow the markup below to get started:</p>

<%= code_example '
<div id="myModal" class="reveal-modal">
  <h2>Awesome. I have it.</h2>
  <p class="lead">Your couch.  It is mine.</p>
  <p>Im a cool paragraph that lives inside of an even cooler modal. Wins</p>
  <a class="close-reveal-modal">&#215;</a>
</div>', :html %>

        <p>The class options:</p>
        <ul class="disc">
          <li><code>small</code>: Set the width to 30%.</li>
          <li><code>medium</code>: Set the width to 40%.</li>
          <li><code>large</code>: Set the width to 60%.</li>
          <li><code>xlarge</code>: Set the width to 70%.</li>
          <li><code>expand</code>: Set the width to 95%.</li>
        </ul>

        <p>For these styles to come across, make sure you have the default Foundation CSS package or that you've selected reveal from a custom package. These should be linked up following our default <a href="#">HTML page structure</a>.</p>

        <p>The background element is appended to the end of the <code>body</code> element. If you would like to override this functionality you can add your own Reveal background anywhere on the page; this will allow you to style if if your scope is smaller than the body of the page.</p>

<%= code_example '
<div class="reveal-modal-bg" style="display: none"></div>
', :html %>

        <h5>Firing a Reveal Modal</h5>
        <p>To launch a modal, just add a <code>data-reveal-id</code> to the object which you want to fire the modal when clicked. The <code>data-reveal-id</code> needs to match the <code>id</code> of your reveal.</p>

    <%= code_example '
<a href="#" data-reveal-id="myModal">Click Me For A Modal</a>', :html %>

        <p>You can also open and close Reveal via JavaScript:</p>

<%= code_example "
// trigger by event
$('a.reveal-link').trigger('click');
$('a.close-reveal-modal').trigger('click');

// or directly on the modal
$('#myModal').foundation('reveal', 'open');
$('#myModal').foundation('reveal', 'close');
", :js %>

        <h5>Firing a Reveal Modal with Ajax Content</h5>
        <p>To launch a modal with content from another page, just add a <code>data-reveal-ajax</code> attribute pointing to the url of that page. When clicked, the Reveal modal will be opened with a content from that page. Beware, that content of the object from <code>data-reveal-id</code> attribute will be overwritten as a result.</p>
        <p>To use an url from <code>href</code> attribute just add <code>data-reveal-ajax="true"</code> instead.</p>

<%= code_example '
<button data-reveal-id="myModal" data-reveal-ajax="http://some-url">
    Click Me For A Modal
</button>

<a href="http://some-url" data-reveal-id="myModal" data-reveal-ajax="true">
    Click Me For A Modal
</a>
', :html %>

        <p>Ajax-based Reveal modals can also be opened via JavaScript:</p>

<%= code_example "
// just an url
$('#myModal').foundation('reveal', 'open', 'http://some-url');

// url with extra parameters
$('#myModal').foundation('reveal', 'open', {
    url: 'http://some-url',
    data: {param1: 'value1', param2: 'value2'}
});

// url with custom callbacks
$('#myModal').foundation('reveal', 'open', {
    url: 'http://some-url',
    success: function(data) {
        alert('modal data loaded');
    },
    error: function() {
        alert('failed loading modal');
    }
});
", :js %>

        <p>Please refer to <a href="http://api.jquery.com/jQuery.ajax/" target="_blank">http://api.jquery.com/jQuery.ajax/</a> for a complete list of possible parameters.</p>

        <hr>

        <h3>Build with Mixins</h3>
        <p>We've included SCSS mixins used to style reveal. To use these mixins, you'll need to have the <a href="../sass.html">extension installed</a> or grab <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/_variables.scss">_variables.scss</a>, <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/components/_global.scss">_global.scss</a> and <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/components/_breadcrumbs.scss">_reveal.scss</a> from Github and throw them into a Foundation folder in your project directory. From there, you can import the files at the top of your own SCSS stylesheet, like so:</p>

<%= code_example '
@import "foundation/variables";
@import "foundation/components/global";
@import "foundation/components/reveal";
', :css %>

        <p>If you are using the mixins, you may include the styles on whatever class or ID you'd like, just make sure you follow our markup structure:</p>

<%= code_example '
<div id="myModalID" class="your-class">
  <h2>This is a modal.</h2>
  <p>Some text...</p>
  <a class="your-close-class">&times;</a>
</div>', :html %>

        <h5>Background Mixin</h5>
        <p>The first mixin you'll need to setup when using Reveal through SCSS is the background cover. This is what fades out the rest of the page to help show the modal. The container mixin looks like this:</p>

<%= code_example '
.reveal-modal-bg { @include reveal-bg; }', :css %>

        <h5>Base Mixin</h5>
        <p>This mixin is used to set the basic styles for positioning, visibility and a few other necessities. This mixin also gives you the ability to set the width of the modal. The mixin looks like this:</p>

<%= code_example '
.your-modal-class { @include reveal-modal-base($base-style, $width); }

/* Control whether or not base styles are included, defaults to "true" */
$base-style: true;

/* Control the width of each modal, defaults to 80% */
$width: $reveal-default-width;
', :css %>

        <h5>Style Mixin</h5>
        <p>This mixin gives you access to changing the background color, borders, shadows, and offsets. You can create lots of different modals with this mixin. Here's what the mixin looks like:</p>

<%= code_example '
.your-modal-class { @include reveal-modal-style($bg, $padding, $border, $border-style, $border-width, $border-color, $box-shadow, $top-offset); }

/* Set this to a color to change the background of the modal */
$bg: $reveal-modal-bg;

/* Padding around content inside the modals */
$padding: $reveal-modal-padding;

/* Control whether or not you want a border */
$border: true;

/* If you set border to "true", this controls border style */
$border-style: $reveal-border-style;

/* If you set border to "true", this controls border width */
$border-width: $reveal-border-width;

/* If you set border to "true", this controls border color */
$border-color: $reveal-border-color;

/* Control whether or not you want box-shadows */
$box-shadow: true;

/* Set how far from the top you want your modal to sit */
$top-offset: $reveal-position-top;
', :css %>

        <h5>The Close Button Mixin</h5>
        <p>One important aspect we musn't forget is the close button. We've given you a mixin that will help style the button, it looks like this:</p>

<%= code_example '
.your-modal-close-class { @include reveal-close($color); }

/* Change the color of the close button */
$color: $reveal-close-color;
', :css %>

        <h5>Default SCSS Variables</h5>

    <%= code_example '
$include-html-reveal-classes: $include-html-classes;

/* We use these to control the style of the reveal overlay. */
$reveal-overlay-bg: rgba(#000, .45);
$reveal-overlay-bg-old: #000;

/* We use these to control the style of the modal itself. */
$reveal-modal-bg: #fff;
$reveal-position-top: 50px;
$reveal-default-width: 80%;
$reveal-modal-padding: em-calc(20);
$reveal-box-shadow: 0 0 10px rgba(#000,.4);

/* We use these to style the reveal close button */
$reveal-close-font-size: em-calc(22);
$reveal-close-top: em-calc(8);
$reveal-close-side: em-calc(11);
$reveal-close-color: #aaa;
$reveal-close-weight: bold;

/* We use these to control the modal border */
$reveal-border-style: solid;
$reveal-border-width: 1px;
$reveal-border-color: #666;

$reveal-modal-class: "reveal-modal";
$close-reveal-modal-class: "close-reveal-modal";', :css %>

        <p><strong>Note:</strong> <code>em-calc();</code> is a function we wrote to convert <code>px</code> to <code>em</code>. It is included in <strong>_variables.scss</strong>.</p>

        <hr>

        <h3>Using the JavaScript</h3>
        <div class="panel">
          Before you can use Reveal you'll want to verify that both jQuery (or Zepto) and <code>foundation.js</code> are available on your page. You can refer to the <a href="../javascript.html">javascript documentation</a> on setting that up.
        </div>

        <p>Just add <code>foundation.reveal.js</code> AFTER the <code>foundation.js</code> file. Your markup should look something like this:</p>

        <%= code_example '
<body>

  ...

  <script>
      document.write(\'<script src=/js/vendor/\'
        + (\'__proto__\' in {} ? \'zepto\' : \'jquery\')
        + \'.js><\/script>\');
    </script>

  <script src="js/foundation/foundation.js"></script>
  <script src="js/foundation/foundation.reveal.js"></script>
  <!-- Other JS plugins can be included here -->

  <script>
    $(document).foundation();
  </script>

</body>
        ', :html %>
        <p>Required Foundation Library: <code>foundation.reveal.js</code></p>

        <h5>Optional JavaScript Configuration</h5>

        <p>Reveal options can only be passed in during initialization at this time. However, you can bind to the <i>open</i>, <i>opened</i>, <i>close</i>, and <i>closed</i> events.</p>

    <%= code_example "
{
  animation: 'fadeAndPop',
  animationSpeed: 250,
  closeOnBackgroundClick: true,
  dismissModalClass: 'close-reveal-modal',
  bgClass: 'reveal-modal-bg',
  open: function(){},
  opened: function(){},
  close: function(){},
  closed: function(){},
  bg : $('.reveal-modal-bg'),
  css : {
    open : {
      'opacity': 0,
      'visibility': 'visible',
      'display' : 'block'
    },
    close : {
      'opacity': 1,
      'visibility': 'hidden',
      'display': 'none'
    }
  }
}", :js %>

      </div>
    </div>
</div>
  <div class="large-3 pull-9 columns">
    <%= render "_sidebar-components.html.erb" %>
  </div>
</div>

