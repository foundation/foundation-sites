<% @side_nav = "buttons" %>

<div class="row">
  <div class="large-9 push-3 columns">

    <% @page_title = "Split Buttons" %>
    <div class="row">
      <div class="large-12 columns">
        <h2><%= @page_title %></h2>
        <h4 class="subheader">We've simplified our split buttons by getting rid of the dedicated dropdown associated with them. Instead, you'll use our <a href="#">new dropdown plugin</a> to attach a dropdown to the button style of your choice.</h4>
      </div>
    </div>

    <div class="row">
      <div class="large-12 columns">

        <a href="#" class="tiny button split">Split Button <span data-dropdown="drop"></span></a><br>
        <ul id="drop" class="f-dropdown" data-dropdown-content>
          <li><a href="#">This is a link</a></li>
          <li><a href="#">This is another</a></li>
          <li><a href="#">Yet another</a></li>
        </ul>

        <a href="#" class="small secondary radius button split">Split Button <span data-dropdown="drop2"></span></a><br>
        <ul id="drop2" class="f-dropdown" data-dropdown-content>
          <li><a href="#">This is a link</a></li>
          <li><a href="#">This is another</a></li>
          <li><a href="#">Yet another</a></li>
        </ul>

        <a href="#" class="button alert round split">Split Button <span data-dropdown="drop3"></span></a><br>
        <ul id="drop3" class="f-dropdown" data-dropdown-content>
          <li><a href="#">This is a link</a></li>
          <li><a href="#">This is another</a></li>
          <li><a href="#">Yet another</a></li>
        </ul>

        <a href="#" class="large success button split">Split Button <span data-dropdown="drop4"></span></a><br>
        <ul id="drop4" class="f-dropdown" data-dropdown-content>
          <li><a href="#">This is a link</a></li>
          <li><a href="#">This is another</a></li>
          <li><a href="#">Yet another</a></li>
        </ul>

        <hr>

        <h3>Build With Predefined HTML Classes</h3>
        <p>There are two ways to build buttons in Foundation 4: with our predefined HTML classes or our structure and mixins. Building buttons using our predefined classes is simple, you'll need an <code>&lt;a&gt;</code>, <code>&lt;button&gt;</code> or <code>&lt;input&gt;</code> with a class of <code>.button.split</code>. This will create a default medium button. You can also use size, color and radius classes to control more of the style.</p>

        <p>The classes options:</p>
        <ul class="disc">
          <li>The size classes include: <code>.tiny, .small, .medium</code> or <code>.large</code></li>
          <li>The color classes include: <code>.secondary, .alert</code> or <code>.success</code></li>
          <li>The radius classes include: <code>.radius</code> or <code>.round</code>.</li>
        </ul>

<%= code_example '
<!-- Size Classes -->
<a href="#" class="button split">Default Button <span></span></a>
<a href="#" class="tiny button split">Tiny Button <span></span></a>
<a href="#" class="small button split">Small Button <span></span></a>
<a href="#" class="large button split">Large Button <span></span></a>

<!-- Color Classes -->
<a href="#" class="button split secondary">Secondary Button <span></span></a>
<a href="#" class="button split success">Success Button <span></span></a>
<a href="#" class="button split alert">Alert Button <span></span></a>

<!-- Radius Classes -->
<a href="#" class="button split radius">Radius Button <span></span></a>
<a href="#" class="button split round">Round Button <span></span></a>
', :html %>

        <p>You may chain one class from each group to build up desired default styles. For these styles to take effect, make sure you have the <strong>default Foundation CSS package</strong> or that you've selected <strong>split buttons from a custom package</strong>. These should be linked up following our default <a href="#getting-started">HTML page structure</a>.</p>

        <hr>

        <h3>Build with Mixins</h3>
        <p>We've included SCSS mixins used to style buttons. To use these mixins, you'll need to have the <a href="#extention-install">extension installed</a> or grab <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/_variables.scss">_variables.scss</a>, <a href="#https://github.com/zurb/foundation/blob/master/scss/foundation/components/_buttons.scss">_buttons.scss</a>, <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/components/_global.scss">_global.scss</a> and <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/components/_split-buttons.scss">_split-buttons.scss</a> from Github and throw them into a Foundation folder in your project directory. From there, you can import the files at the top of your own SCSS stylesheet, like so:</p>

<%= code_example '
@import "foundation/variables";
@import "foundation/components/global";
@import "foundation/components/buttons";
@import "foundation/components/split-buttons";
', :css %>

        <p>If you are using the mixins, you may include the styles on whatever class or ID you'd like, just make sure you follow our markup structure:</p>

<%= code_example '
<a href="#" class="your-class-name">Split Button Text <span></span></a>
', :html %>

        <h5>Quick Mixin</h5>
        <p>You can quickly build an entire split buttons using our global mixin by including it on your custom class or ID in your stylesheet. The global mixin will create the necessary style for the button. The global mixin looks like this:</p>

<%= code_example '
/* Using the default styles */
.your-class-name {
  @include button;
  @include split-button;
}
', :css %>

        <a href="" class="split button">Default Split Button<span data-dropdown="drop5"></span></a>
        <ul id="drop5" class="f-dropdown" data-dropdown-content>
          <li><a href="#">This is a link</a></li>
          <li><a href="#">This is another</a></li>
          <li><a href="#">Yet another</a></li>
        </ul>

        <p>There are also <strong>four options</strong> you can customize on the fly when writing this mixin. These control things like: padding size, pip color, border color and base styles. Setting any of these options to <strong>false</strong> will not include the styles.</p>

<%= code_example '
/* Using the available options */
.your-class-name {
  @include button;
  @include split-button($padding, $pip-color, $span-border, $base-style);
}

/* This controls padding around the dropdown buttons. Use tiny, small, medium, or large */
$padding: $button-med

/* This controls the dropdown pip color. Set to one of our variables or a custom hex value */
$pip-color: $split-button-pip-color

/* This controls the border color of the triangle span area. This can be a variable or color value. */
$span-border: $primary-color

/* This controls whether or not base styles come through. Set to false to negate */
/* Handy when you want to have many different styles */
$base-style: true
', :css %>

        <h5>Default SCSS Variables</h5>
<%= code_example '
$include-html-button-classes: $include-html-classes;

/* We use these to control different shared styles for Split Buttons */
$split-button-function-factor: 15%;
$split-button-pip-color: #fff;
$split-button-pip-color-alt: #333;
$split-button-active-bg-tint: rgba(0,0,0,0.1);

/* We use these to control tiny split buttons */
$split-button-padding-tny: $button-tny * 9;
$split-button-span-width-tny: $button-tny * 6.5;
$split-button-pip-size-tny: $button-tny;
$split-button-pip-top-tny: $button-tny * 2;
$split-button-pip-default-float-tny: em-calc(-5);

/* We use these to control small split buttons */
$split-button-padding-sml: $button-sml * 7;
$split-button-span-width-sml: $button-sml * 5;
$split-button-pip-size-sml: $button-sml;
$split-button-pip-top-sml: $button-sml * 1.5;
$split-button-pip-default-float-sml: em-calc(-9);

/* We use these to control medium split buttons */
$split-button-padding-med: $button-med * 6.4;
$split-button-span-width-med: $button-med * 4;
$split-button-pip-size-med: $button-med - em-calc(3);
$split-button-pip-top-med: $button-med * 1.5;
$split-button-pip-default-float-med: em-calc(-9);

/* We use these to control large split buttons */
$split-button-padding-lrg: $button-lrg * 6;
$split-button-span-width-lrg: $button-lrg * 3.75;
$split-button-pip-size-lrg: $button-lrg - em-calc(6);
$split-button-pip-top-lrg: $button-lrg + em-calc(5);
$split-button-pip-default-float-lrg: em-calc(-9);
', :css %>

        <p><strong>Note:</strong> <code>em-calc();</code> is a function we wrote to convert <code>px</code> to <code>em</code>. It is included in <strong>_variables.scss</strong>.</p>

        <hr>

        <h3>Using the JavaScript</h3>
        <div class="panel">
          Before you can use split buttons you'll want to verify that both jQuery (or Zepto) and <code>foundation.js</code> are available on your page. You can refer to the <a href="../javascript.html">javascript documentation</a> on setting that up.
        </div>

        <p>Just add <code>foundation.dropdown.js</code> AFTER the <code>foundation.js</code> file. Your markup should look something like this:</p>

        <%= code_example '
<body>

  ...

  <script>
      document.write(\'<script src=/js/vendor/\'
        + (\'__proto__\' in {} ? \'zepto\' : \'jquery\')
        + \'.js><\/script>\');
    </script>

  <script src="js/foundation/foundation.js"></script>
  <script src="js/foundation/foundation.dropdown.js"></script>
  <!-- Other JS plugins can be included here -->

  <script>
    $(document).foundation();
  </script>

</body>
        ', :html %>
        <p>Required Foundation Library: <code>foundation.dropdown.js</code></p>

        <h5>Creating the Dropdown</h5>
        <p>To create a dropdown, you'll need to attach a data-attribute to whatever element you want the dropdown attached to (in this case a button). From there, you'll create a list that holds the links or content and add another data-attribute that associates with the element it belongs to. Here's an example of that markup:</p>

<%= code_example '
<a href="#" class="button split">Dropdown Button <span data-dropdown="drop1"></span></a>
<ul id="drop1" class="f-dropdown" data-dropdown-content>
  <li><a href="#">This is a link</a></li>
  <li><a href="#">This is another</a></li>
  <li><a href="#">Yet another</a></li>
</ul>
', :html %>

        <a href="#" class="button split">Dropdown Button <span data-dropdown="drop6"></span></a><br>
        <ul id="drop6" class="f-dropdown" data-dropdown-content>
          <li><a href="#">This is a link</a></li>
          <li><a href="#">This is another</a></li>
          <li><a href="#">Yet another</a></li>
        </ul>

        <p>You'll notice that <code>data-dropdown="drop1"</code> and <code>id="drop1"</code> have similar values. This is what tells the dropdown plugin where to look to find the position to attach the dropdown element to.</p>

        <h5>Optional JavaScript Configuration</h5>

        <p>Dropdown button options can only be passed in during initialization at this time.</p>

<%= code_example "{
  // specify the class used for active sections
  activeClass: 'open'
}", :js %>

      </div>
    </div>

  </div>
  <div class="large-3 pull-9 columns">
    <%= render "_sidebar-components.html.erb" %>
  </div>
</div>


