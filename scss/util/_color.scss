// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@import 'math';

/// Colors available by using `get-color()`.
/// @type Map
$foundation-colors: (
  'blue': #1779ba,
  'green': #3adb76,
  'yellow': #ffae00,
  'red': #cc4b37,
  'white': #fefefe,
  'light-gray': #e6e6e6,
  'medium-gray': #cacaca,
  'dark-gray': #8a8a8a,
  'gray': #767676,
  'black': #0a0a0a,
) !default;

////
/// @group functions
////

/// Checks the luminance of `$color`.
///
/// @param {Color} $color - Color to check the luminance of.
///
/// @returns {Number} The luminance of `$color`.
@function color-luminance($color) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
  $rgba: red($color), green($color), blue($color);
  $rgba2: ();

  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: $rgb / 255;

    $rgb: if($rgb < 0.03928, $rgb / 12.92, pow(($rgb + 0.055) / 1.055, 2.4));

    $rgba2: append($rgba2, $rgb);
  }

  @return 0.2126 * nth($rgba2, 1) + 0.7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);
}

/// Checks the contrast ratio of two colors.
///
/// @param {Color} $color1 - First color to compare.
/// @param {Color} $color2 - Second color to compare.
///
/// @returns {Number} The contrast ratio of the compared colors.
@function color-contrast($color1, $color2) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
  $luminance1: color-luminance($color1) + 0.05;
  $luminance2: color-luminance($color2) + 0.05;
  $ratio: $luminance1 / $luminance2;

  @if $luminance2 > $luminance1 {
    $ratio: 1 / $ratio;
  }

  $ratio: round($ratio * 10) / 10;

  @return $ratio;
}

/// Checks the luminance of `$base`, and returns the color from `$colors` (list of colors) that has the most contrast.
///
/// @param {Color} $color1 - First color to compare.
/// @param {Color} $color2 - Second color to compare.
///
/// @returns {Number} The contrast ratio of the compared colors.
@function color-pick-contrast($base, $colors: ($white, $black), $tolerance: 0) {
  $contrast: color-contrast($base, nth($colors, 1));
  $best: nth($colors, 1);

  @for $i from 2 through length($colors) {
    $current-contrast: color-contrast($base, nth($colors, $i));
    @if ($current-contrast - $contrast > $tolerance) {
      $contrast: color-contrast($base, nth($colors, $i));
      $best: nth($colors, $i);
    }
  }

  @if ($contrast < 3) {
    @warn "Contrast ratio of #{$best} on #{$base} is pretty bad, just #{$contrast}";
  }

  @return $best;
}

/// Scales a color to be darker if it's light, or lighter if it's dark. Use this function to tint a color appropriate to its lightness.
///
/// @param {Color} $color - Color to scale.
/// @param {Percentage} $scale [5%] - Amount to scale up or down.
/// @param {Percentage} $threshold [40%] - Threshold of lightness to check against.
///
/// @returns {Color} A scaled color.
@function smart-scale($color, $scale: 5%, $threshold: 40%) {
  @if lightness($color) > $threshold {
    $scale: -$scale;
  }
  @return scale-color($color, $lightness: $scale);
}

/// Get color from foundation-colors
///
/// @param {key} color key from foundation-colors
///
/// @returns {Color} color from foundation-colors
@function get-color($key) {
  @if map-has-key($foundation-colors, $key) {
    @return map-safe-get($foundation-colors, $key);
  }
  @else {
    @error 'given key "#{$key}" is not available in $foundation-colors';
  }
}

/// Get color state from foundation-states
///
/// @param {key} state key from foundation-states
///
/// @returns {Color} color from foundation-states
@function get-state($key) {
  @if map-has-key($foundation-states, $key) {
    @return map-safe-get($foundation-states, $key);
  }
  @else {
    @error 'given key "#{$key}" is not available in $foundation-states';
  }
}

/// Transfers the colors in the `$foundation-states` map into variables, such as `$primary-color` and `$secondary-color`. Call this mixin below the Global section of your settings file to properly migrate your codebase.
@mixin add-foundation-colors() {
  @if map-has-key($foundation-states, primary) {
    $primary-color: map-safe-get($foundation-states, primary) !global;
  }
  @if map-has-key($foundation-states, secondary) {
    $secondary-color: map-safe-get($foundation-states, secondary) !global;
  }
  @if map-has-key($foundation-states, success) {
    $success-color: map-safe-get($foundation-states, success) !global;
  }
  @if map-has-key($foundation-states, warning) {
    $warning-color: map-safe-get($foundation-states, warning) !global;
  }
  @if map-has-key($foundation-states, alert) {
    $alert-color: map-safe-get($foundation-states, alert) !global;
  }
}
