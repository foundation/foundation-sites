//
// Switches
//

// Variables
// Maximum possible number of options
$switchOptions: 5;

// Create the default switch
@mixin switch-base {
  
  // hide the switch button by default, for old browsers
  .slide-button {
    display: none;
  }
  
  // old browsers get standard form elements
  // enhance the switch only on browsers with support for media queries
  @media only screen {
    
    position: relative;
    padding: 0;

    display: block;
    width: 100%;
    overflow: hidden;
    
    label {
      position: relative;
      z-index: 2;

      float: left;
      width: 50%;
      height: 100%;
      margin: 0;
      
      font-weight: bold;
      text-align: center;
    }

    .slide-button {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;

      display: block;
      
      width: 50%;
      height: 100%;
      padding: 0;

      // @include single-transition(all, 0.3s, ease-out);
    }

    input {
      position: absolute;
      opacity: 0;
    }

    // Outline the toggles when the inputs are focused
    input:focus + label {
      outline: 1px dotted #888;
    }

    input:last-of-type:checked ~ .slide-button {
      left: 50%;
    }

    // Bugfix for older Webkit, including mobile Webkit. Adapted from:
    // http://css-tricks.com/webkit-sibling-bug/
    -webkit-animation: webkitSiblingBugfix infinite 1s;
    
  }
  
}

// old-webkit sibling bugfix, see above
@-webkit-keyframes webkitSiblingBugfix { from { position: relative; } to { position: relative; } }

// Add switch sizes, using the button variables
@mixin switch-size($pad: $btn-med) {
  
  label {
    padding: $pad 0;
    
    // We control the font-size based on mixin input.
    @if      $pad == $btn-med { font-size: $btn-txt-med; }
    @else if $pad == $btn-tny { font-size: $btn-txt-tny; }
    @else if $pad == $btn-sml { font-size: $btn-txt-sml; }
    @else if $pad == $btn-lrg { font-size: $btn-txt-lrg; }
    @else                     { font-size: $pad - 2; }
  }
  
}

// Multiple options
@mixin switch-options($count: 2) {
  
  // only add styles if there are more than 2 options
  // two options are set by default by the @switch-base mixin
  @if $count > 2 {
    
    // calculate the label and button width, depending on the number of options
    $width: 100 / $count;
    
    label,
    .slide-button {
      width: $width * 1%;
    }
    
    // set the position of the switch, when selected
    @for $j from 2 through ($count + 1) {

      input:checked:nth-of-type(#{$j}) ~ .slide-button {
        left: $width * ($j - 1) * 1%;
      }

    }

    // position of the switch, when the last element is selected
    input:checked:last-of-type ~ .slide-button {
      left: 100 - $width * 1%;
    }
    
  }
  
}


// Quickly create a switch with a single mixin
@mixin switch($pad: $btn-med, $count: 2) {
  @include switch-base;
  @include switch-size($pad);
  @include switch-options($count);
}

// Default two-option switch
.switch {
  
  @include switch-base;
  @include switch-size;
  
  // Switch Sizes
  &.large { @include switch-size($pad:$btn-lrg); }
  &.medium { @include switch-size; }
  &.small { @include switch-size($pad:$btn-sml); }
  &.tiny { @include switch-size($pad:$btn-tny); }

}

// Support for multiple options, up to the maximum set in the $switchOptions variable
@for $i from 3 through $switchOptions {
  
  .switch-#{$i} {
    @extend .switch;
    
    @include switch-options($i);
  }

}
