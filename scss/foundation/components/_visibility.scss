@import "global";

//
// Foundation Visibility Classes
//
$include-html-visibility-classes: $include-html-classes !default;
$include-table-visibility-classes: true;

// breakpoints
$breakpoint_sizes:
  small,
  medium,
  large,
  xlarge,
  xxlarge
;
$breakpoint_queries:
  unquote($small-up),
  unquote($medium-up),
  unquote($large-up),
  unquote($xlarge-up),
  unquote($xxlarge-up)
;

@mixin visible_loop {
  
  @each $current_breakpoint in $breakpoint_sizes {
    
    $inherit_list: ();
    $none_list: ();
    
    $table_list: ();
    $table_header_group_list: ();
    $table_row_group_list: ();
    $table_row_list: ();
    $table_cell_list: ();
    
    @each $comparison_breakpoint in $breakpoint_sizes {
      @if index($breakpoint_sizes, $comparison_breakpoint) < index($breakpoint_sizes, $current_breakpoint) {
        // smaller than current breakpoint
        
        $inherit_list: append($inherit_list, unquote(
          '.hide-for-#{$comparison_breakpoint}, .hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        $none_list: append($none_list, unquote(
          '.show-for-#{$comparison_breakpoint}, .show-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_list: append($table_list, unquote(
          'table.hide-for-#{$comparison_breakpoint}, table.hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_header_group_list: append($table_header_group_list, unquote(
          'thead.hide-for-#{$comparison_breakpoint}, thead.hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_row_group_list: append($table_row_group_list, unquote(
          'tbody.hide-for-#{$comparison_breakpoint}, tbody.hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_row_list: append($table_row_list, unquote(
          'tr.hide-for-#{$comparison_breakpoint}, tr.hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_cell_list: append($table_cell_list, unquote(
          'th.hide-for-#{$comparison_breakpoint}, th.hide-for-#{$comparison_breakpoint}-only, td.hide-for-#{$comparison_breakpoint}, td.hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        
        // exclude #{$comparison_breakpoint}-down classes for first breakpoint
        @if index($breakpoint_sizes, $comparison_breakpoint) != 1 {
          $inherit_list: append($inherit_list, unquote(
            '.hide-for-#{$comparison_breakpoint}-down'
          ), comma);
          $none_list: append($none_list, unquote(
            '.show-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_list: append($table_list, unquote(
            'table.hide-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_header_group_list: append($table_header_group_list, unquote(
            'thead.hide-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_row_group_list: append($table_row_group_list, unquote(
            'tbody.hide-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_row_list: append($table_row_list, unquote(
            'tr.hide-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_cell_list: append($table_cell_list, unquote(
            'th.hide-for-#{$comparison_breakpoint}-down, td.hide-for-#{$comparison_breakpoint}-down'
          ), comma);
        }
        
        // exclude #{$comparison_breakpoint}-up classes for last breakpoint
        @if index($breakpoint_sizes, $comparison_breakpoint) != length($breakpoint_sizes) {
          $inherit_list: append($inherit_list, unquote(
            '.show-for-#{$comparison_breakpoint}-up'
          ), comma);
          $none_list: append($none_list, unquote(
            '.hide-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_list: append($table_list, unquote(
            'table.show-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_header_group_list: append($table_header_group_list, unquote(
            'thead.show-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_row_group_list: append($table_row_group_list, unquote(
            'tbody.show-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_row_list: append($table_row_list, unquote(
            'tr.show-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_cell_list: append($table_cell_list, unquote(
            'th.show-for-#{$comparison_breakpoint}-up, td.show-for-#{$comparison_breakpoint}-up'
          ), comma);
        }
      } @else if index($breakpoint_sizes, $comparison_breakpoint) > index($breakpoint_sizes, $current_breakpoint) {
        // larger than current breakpoint
        
        $inherit_list: append($inherit_list, unquote(
          '.hide-for-#{$comparison_breakpoint}, .hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        $none_list: append($none_list, unquote(
          '.show-for-#{$comparison_breakpoint}, .show-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_list: append($table_list, unquote(
          'table.hide-for-#{$comparison_breakpoint}, table.hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_header_group_list: append($table_header_group_list, unquote(
          'thead.hide-for-#{$comparison_breakpoint}, thead.hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_row_group_list: append($table_row_group_list, unquote(
          'tbody.hide-for-#{$comparison_breakpoint}, tbody.hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_row_list: append($table_row_list, unquote(
          'tr.hide-for-#{$comparison_breakpoint}, tr.hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_cell_list: append($table_cell_list, unquote(
          'th.hide-for-#{$comparison_breakpoint}, th.hide-for-#{$comparison_breakpoint}-only, td.hide-for-#{$comparison_breakpoint}, td.hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        
        // exclude #{$comparison_breakpoint}-down classes for first breakpoint
        @if index($breakpoint_sizes, $comparison_breakpoint) != 1 {
          $inherit_list: append($inherit_list, unquote(
            '.show-for-#{$comparison_breakpoint}-down'
          ), comma);
          $none_list: append($none_list, unquote(
            '.hide-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_list: append($table_list, unquote(
            'table.show-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_header_group_list: append($table_header_group_list, unquote(
            'thead.show-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_row_group_list: append($table_row_group_list, unquote(
            'tbody.show-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_row_list: append($table_row_list, unquote(
            'tr.show-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_cell_list: append($table_cell_list, unquote(
            'th.show-for-#{$comparison_breakpoint}-down, td.show-for-#{$comparison_breakpoint}-down'
          ), comma);
        }
        
        // exclude #{$comparison_breakpoint}-up classes for last breakpoint
        @if index($breakpoint_sizes, $comparison_breakpoint) != length($breakpoint_sizes) {
          $inherit_list: append($inherit_list, unquote(
            '.hide-for-#{$comparison_breakpoint}-up'
          ), comma);
          $none_list: append($none_list, unquote(
            '.show-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_list: append($table_list, unquote(
            'table.hide-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_header_group_list: append($table_header_group_list, unquote(
            'thead.hide-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_row_group_list: append($table_row_group_list, unquote(
            'tbody.hide-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_row_list: append($table_row_list, unquote(
            'tr.hide-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_cell_list: append($table_cell_list, unquote(
            'th.hide-for-#{$comparison_breakpoint}-up, td.hide-for-#{$comparison_breakpoint}-up'
          ), comma);
        }
      } @else {
        // current breakpoint
        
        $inherit_list: append($inherit_list, unquote(
          '.show-for-#{$comparison_breakpoint}, .show-for-#{$comparison_breakpoint}-only'
        ), comma);
        $none_list: append($none_list, unquote(
          '.hide-for-#{$comparison_breakpoint}, .hide-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_list: append($table_list, unquote(
          'table.show-for-#{$comparison_breakpoint}, table.show-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_header_group_list: append($table_header_group_list, unquote(
          'thead.show-for-#{$comparison_breakpoint}, thead.show-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_row_group_list: append($table_row_group_list, unquote(
          'tbody.show-for-#{$comparison_breakpoint}, tbody.show-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_row_list: append($table_row_list, unquote(
          'tr.show-for-#{$comparison_breakpoint}, tr.show-for-#{$comparison_breakpoint}-only'
        ), comma);
        $table_cell_list: append($table_cell_list, unquote(
          'th.show-for-#{$comparison_breakpoint}, th.show-for-#{$comparison_breakpoint}-only, td.show-for-#{$comparison_breakpoint}, td.show-for-#{$comparison_breakpoint}-only'
        ), comma);
        
        // exclude #{$comparison_breakpoint}-down classes for first breakpoint
        @if index($breakpoint_sizes, $comparison_breakpoint) != 1 {
          $inherit_list: append($inherit_list, unquote(
            '.show-for-#{$comparison_breakpoint}-down'
          ), comma);
          $none_list: append($none_list, unquote(
            '.hide-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_list: append($table_list, unquote(
            'table.show-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_header_group_list: append($table_header_group_list, unquote(
            'thead.show-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_row_group_list: append($table_row_group_list, unquote(
            'tbody.show-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_row_list: append($table_row_list, unquote(
            'tr.show-for-#{$comparison_breakpoint}-down'
          ), comma);
          $table_cell_list: append($table_cell_list, unquote(
            'th.show-for-#{$comparison_breakpoint}-down, td.show-for-#{$comparison_breakpoint}-down'
          ), comma);
        }
        
        // exclude #{$comparison_breakpoint}-up classes for last breakpoint
        @if index($breakpoint_sizes, $comparison_breakpoint) != length($breakpoint_sizes) {
          $inherit_list: append($inherit_list, unquote(
            '.show-for-#{$comparison_breakpoint}-up'
          ), comma);
          $none_list: append($none_list, unquote(
            '.hide-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_list: append($table_list, unquote(
            'table.show-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_header_group_list: append($table_header_group_list, unquote(
            'thead.show-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_row_group_list: append($table_row_group_list, unquote(
            'tbody.show-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_row_list: append($table_row_list, unquote(
            'tr.show-for-#{$comparison_breakpoint}-up'
          ), comma);
          $table_cell_list: append($table_cell_list, unquote(
            'th.show-for-#{$comparison_breakpoint}-up, td.show-for-#{$comparison_breakpoint}-up'
          ), comma);
        }
      }
    }
    
    /* #{$current_breakpoint} displays */
    @media #{nth($breakpoint_queries, index($breakpoint_sizes, $current_breakpoint))} {
      #{$inherit_list} {
        display: inherit !important;
      }
      #{$none_list} {
        display: none !important;
      }
      @if $include-table-visibility-classes != false {
        #{$table_list} {
          display: table;
        }
        #{$table_header_group_list} {
          display: table-header-group !important;
        }
        #{$table_row_group_list} {
          display: table-row-group !important;
        }
        #{$table_row_list} {
          display: table-row !important;
        }
        #{$table_cell_list} {
          display: table-cell !important;
        }
      }
    }
  }
}


@if $include-html-visibility-classes != false {

  @include visible_loop;

  /* Orientation targeting */
  .show-for-landscape,
  .hide-for-portrait { display: inherit !important; }
  .hide-for-landscape,
  .show-for-portrait { display: none !important; }

  /* Specific visibility for tables */
  table {
    &.hide-for-landscape,
    &.show-for-portrait { display: table; }
  }
  thead {
    &.hide-for-landscape,
    &.show-for-portrait { display: table-header-group !important; }
  }
  tbody {
    &.hide-for-landscape,
    &.show-for-portrait { display: table-row-group !important; }
  }
  tr {
    &.hide-for-landscape,
    &.show-for-portrait { display: table-row !important; }
  }
  td,
  th {
    &.hide-for-landscape,
    &.show-for-portrait { display: table-cell !important; }
  }

  @media #{$landscape} {
    .show-for-landscape,
    .hide-for-portrait { display: inherit !important; }
    .hide-for-landscape,
    .show-for-portrait { display: none !important; }

    /* Specific visibility for tables */
    table {
      &.show-for-landscape,
      &.hide-for-portrait { display: table; }
    }
    thead {
      &.show-for-landscape,
      &.hide-for-portrait { display: table-header-group !important; }
    }
    tbody {
      &.show-for-landscape,
      &.hide-for-portrait { display: table-row-group !important; }
    }
    tr {
      &.show-for-landscape,
      &.hide-for-portrait { display: table-row !important; }
    }
    td,
    th {
      &.show-for-landscape,
      &.hide-for-portrait { display: table-cell !important; }
    }
  }

  @media #{$portrait} {
    .show-for-portrait,
    .hide-for-landscape { display: inherit !important; }
    .hide-for-portrait,
    .show-for-landscape { display: none !important; }

    /* Specific visibility for tables */
    table {
      &.show-for-portrait,
      &.hide-for-landscape { display: table; }
    }
    thead {
      &.show-for-portrait,
      &.hide-for-landscape { display: table-header-group !important; }
    }
    tbody {
      &.show-for-portrait,
      &.hide-for-landscape { display: table-row-group !important; }
    }
    tr {
      &.show-for-portrait,
      &.hide-for-landscape { display: table-row !important; }
    }
    td,
    th {
      &.show-for-portrait,
      &.hide-for-landscape { display: table-cell !important; }
    }
  }

  /* Touch-enabled device targeting */
  .show-for-touch { display: none !important; }
  .hide-for-touch { display: inherit !important; }
  .touch .show-for-touch { display: inherit !important; }
  .touch .hide-for-touch { display: none !important; }

  /* Specific visibility for tables */
  table.hide-for-touch { display: table; }
  .touch table.show-for-touch { display: table; }
  thead.hide-for-touch { display: table-header-group !important; }
  .touch thead.show-for-touch { display: table-header-group !important; }
  tbody.hide-for-touch { display: table-row-group !important; }
  .touch tbody.show-for-touch { display: table-row-group !important; }
  tr.hide-for-touch { display: table-row !important; }
  .touch tr.show-for-touch { display: table-row !important; }
  td.hide-for-touch { display: table-cell !important; }
  .touch td.show-for-touch { display: table-cell !important; }
  th.hide-for-touch { display: table-cell !important; }
  .touch th.show-for-touch { display: table-cell !important; }

}
