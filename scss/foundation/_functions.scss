// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

// This is the default html and body font-size for the base rem value.
$rem-base: 16px !default;

// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for components that rely on other components.
$modules: () !default;

@mixin exports($name) {
  // Import from global scope
  $modules: $modules !global;
  // Check if a module is already on the list
  $module_index: index($modules, $name);
  @if (($module_index == null) or ($module_index == false)) {
    $modules: append($modules, $name) !global;
    @content;
  }
}

//
// @functions
//


// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range, 1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// TEXT INPUT TYPES

@function text-inputs( $types: all, $selector: input ) {

  $return: ();

  $all-text-input-types:
    text
    password
    date
    datetime
    datetime-local
    month
    week
    email
    number
    search
    tel
    time
    url
    color
    textarea;

  @if $types == all { $types: $all-text-input-types; }

  @each $type in $types {
    @if $type == textarea {
      @if $selector == input {
        $return: append($return, unquote('#{$type}'), comma)
      } @else {
        $return: append($return, unquote('#{$type}#{$selector}'), comma)
      }
    } @else {
      $return: append($return, unquote('#{$selector}[type="#{$type}"]'), comma)
    }
  }

    @return $return;

}

// CONVERT TO REM
@function convert-to-rem($value, $base-value: $rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

@function data($attr) {
  @if $namespace {
    @return '[data-' + $namespace + '-' + $attr + ']';
  }

  @return '[data-' + $attr + ']';
}

// REM CALC

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//   rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//   rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   rem-calc((16px, 32px, 48), 8px);

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}


@function em-calc($values, $base-value: $rem-base) {
  $remValues: rem-calc($values, $base-value: $rem-base);

  $max: length($remValues);

  @if $max == 1 { @return strip-unit(nth($remValues, 1)) * 1em; }

  $emValues: ();
  @for $i from 1 through $max {
    $emValues: append($emValues, strip-unit(nth($remValues, $i)) * 1em);
  }
  @return $emValues;
}


// Deprecated: OLD EM CALC
@function emCalc($values) {
  @return em-calc($values);
}


@function adjacent-breakpoint($breakpoint-name, $direction: 1) {
  $current-index: index(map-keys($all-breakpoints), $breakpoint-name);
  $adjacent-index: ($current-index + $direction);
  $adjacent-name: null;
  $adjacent-size: null;
  @if $adjacent-index < 1 or $adjacent-index > length($all-breakpoints) {
    $adjacent-name: $breakpoint-name;
    $adjacent-size: map-get($all-breakpoints, $breakpoint-name);
  } @else {
    $adjacent-name: nth(map-keys($all-breakpoints), $adjacent-index);
    $adjacent-size: nth(map-values($all-breakpoints), $adjacent-index);
  }
  @return ($adjacent-name: $adjacent-size);
}
@function adjacent-breakpoint-size($breakpoint-name, $direction: 1) {
  $adjacent-breakpoint: adjacent-breakpoint($breakpoint-name, $direction);
  $adjacent-size: nth(map-values($adjacent-breakpoint), 1);
  @return $adjacent-size;
}
@function adjacent-breakpoint-name($breakpoint-name, $direction: 1) {
  $adjacent-breakpoint: adjacent-breakpoint($breakpoint-name, $direction);
  $adjacent-name: nth(map-keys($adjacent-breakpoint), 1);
  @return $adjacent-name;
}
@function prev-breakpoint-size($breakpoint-name) {
  @return adjacent-breakpoint-size($breakpoint-name, -1);
}
@function prev-breakpoint-name($breakpoint-name) {
  @return adjacent-breakpoint-name($breakpoint-name, -1);
}
@function next-breakpoint-size($breakpoint-name) {
  @return adjacent-breakpoint-size($breakpoint-name, 1);
}
@function next-breakpoint-name($breakpoint-name) {
  @return adjacent-breakpoint-name($breakpoint-name, 1);
}
@function breakpoint-range($breakpoint-name) {
  $breakpoint-size: px-to-em(map-get($all-breakpoints, $breakpoint-name));
  $next-name: next-breakpoint-name($breakpoint-name);
  $next-size: next-breakpoint-size($breakpoint-name);
  @if $next-name == $breakpoint-name {
    $next-size: (em-to-px($infinity * 1em) + 1px);
  }
  $next-size: px-to-em($next-size - 1px);
  @return ($breakpoint-size, $next-size);
}
@function px-to-em($value) {
  @if is-zero($value) {
    @return 0;
  }
  @if unitless($value) {
    $value: $value * 1px;
  }
  @if unit($value) != 'px' {
    @return $value;
  }
  $em: (round(($value / $rem-base) * 10000) / 10000);
  @return $em * 1em;
}
@function em-to-px($value) {
  @if is-zero($value) {
    @return 0;
  }
  @if unitless($value) {
    $value: $value * 1em;
  }
  @if unit($value) != 'em' {
    @return $value;
  }
  $px: (($value / 1em) * $rem-base);
  @return $px;
}
@function is-zero($value) {
  @return
    type-of($value) == number
    and strip-unit($value) == 0;
}
